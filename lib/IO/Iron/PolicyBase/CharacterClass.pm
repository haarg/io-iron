package IO::Iron::PolicyBase::CharacterClass;
## no critic (Modules::RequireVersionVar)
## no critic (Subroutines::RequireArgUnpacking)

use 5.010_000;
use strict;
use warnings FATAL => 'all';

# Global creator
BEGIN {
    # Inherit nothing
}

# Global destructor
END {
}

use Log::Any  qw{$log};
use Params::Validate qw(:all);

=head1 NAME

IO::Iron::PolicyBase::CharacterClasses - Base package (inherited) for IO::Iron::IronMQ/Cache/Worker::Policy packages.

=cut

# VERSION: generated by DZP::OurPkgVersion

=head1 SYNOPSIS

This class is for internal use only.

=cut

sub class {
    my %params = validate(
        @_, {
            'character_group' => { type => SCALAR, regex => qr/^[[:graph:]]+$/msx, }, # character group name. ## no policy (Variables::ProhibitPunctuationVars)
        },
    );
    my ($group_name) = $params{'character_group'} =~ /\[:([[:graph:]]+):\]/msx;
    $log->tracef('group_name=%s;', $group_name);
    if($group_name eq 'alpha') { return alpha(); }
    elsif($group_name eq 'alpha') { return alpha(); }
    elsif($group_name eq 'alnum') { return alnum(); }
    elsif($group_name eq 'digit') { return digit(); }
    elsif($group_name eq 'lower') { return lower(); }
    #elsif($group_name eq 'punct') { return punct(); }
    elsif($group_name eq 'upper') { return upper(); }
    elsif($group_name eq 'word') { return word(); }
    else { return; }
}

sub alpha {
    return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
            .'abcdefghijklmnopqrstuvwxyz';
}

sub alnum {
    return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        .'abcdefghijklmnopqrstuvwxyz'
        .'0123456789';
}

sub digit {
    return '0123456789';
}

sub lower {
    return 'abcdefghijklmnopqrstuvwxyz';
}

#subpunct{
#returnqw{-!"},qq{\#},qw{$%&'()*+,./:;<=>?@[\\\]^_`},q/{/,q/|/,q/}/,q/~/;
#}



sub upper {
    return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
}

sub word {
    return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
            .'abcdefghijklmnopqrstuvwxyz'
            .'0123456789_';
}

1;
